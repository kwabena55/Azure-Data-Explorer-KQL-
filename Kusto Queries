StormEvents
| limit 1000

// Count rows in the StormEvents Table
StormEvents
| count

// Display selected columns in the StormEvents Table
StormEvents
| project EndTime,EpisodeId

// Filtering
StormEvents
| where EpisodeId > 2560

// Use of Distinct
StormEvents
| distinct State

// Use Distinct Count

StormEvents
| distinct State
| count

// select some columns
StormEvents
| project DamageProperty,DeathsDirect,State,EventId
| limit 10

// Some Alias
StormEvents
| project Damage=DamageProperty,Death=DeathsDirect, Stat=State


// Make some queries case insensitive using the ~ 
StormEvents
| where State =~"mississippi"  // ~ is so cool


// Show table Schema

StormEvents
| getschema 


// Group by: Sum of Damage property by DamageProperty
// Remember summarize is the same as Group by so we need to group by a field and just specify the aggregrate
StormEvents
|limit 10000

StormEvents
| summarize DamageProp=sum(DamageProperty),Crops=sum(DamageCrops) by State


//  Grooup by State and Show the sum of Damage Properties and Eventid
StormEvents
| summarize DamageProp=sum(DamageProperty),Crops=sum(DamageCrops), count_Instances=count() by State

StormEvents
| summarize DamageProp=sum(DamageProperty),Crops=sum(DamageCrops), count_Instances=count() by State
| where count_Instances >=2000 

StormEvents
| summarize DamageProp=sum(DamageProperty),Crops=sum(DamageCrops), count_Instances=count() by State
|where count_Instances <2000

// Calculated Column
StormEvents
| summarize DamageProp=sum(DamageProperty), DamageProp_ratio= sum(DamageProperty)/count() by State


// Group by Date
StormEvents
|summarize DamageProp=sum(DamageProperty), DamageProp_ratio= sum(DamageProperty)/count() by month=monthofyear(StartTime)
| order by month asc 


// Group by Year
StormEvents
|summarize DamageProp=sum(DamageProperty), DamageProp_ratio= sum(DamageProperty)/count() by year=getyear(StartTime)
| order by year 

//Group by Year
StormEvents
| summarize DamageProp=sum(DamageProperty), DamageProp_ratio= sum(DamageProperty)/count() by week=startofweek(StartTime)
| sort by endofmonth(week,1)



// Group by multiple columns
StormEvents
|summarize avg_deaths= avg(DamageProperty) by State,MonthStart=startofmonth(todatetime(StartTime))


StormEvents
|where State in ("OHIO","HAWAII")
|summarize avg_deaths= avg(DamageProperty) by State,MonthStart=startofmonth(todatetime(StartTime))

// Total Cases ( Damage Property)

StormEvents
| summarize DamCrop=sum(DamageCrops) by State


// Calculated Column ( we use extend)

StormEvents
| where State contains  "SA"
| extend TotalDamage=DamageCrops+ DamageProperty  // calculated Column

StormEvents
| where State  contains "SA"
| summarize  TotalDamage=(DamageCrops + DamageProperty) by State  // Cant work bcos susmmarize need one aggregrate functionclear


StormEvents
| where State contains  "SA"
| extend TotalDamage=DamageCrops+ DamageProperty  // calculated Column
|project EventId,StartTime,TotalDamage


// Join Example-- Because tables are not related, lets create a temp table so we can join( leverage variables)
let StateCodes= StormEvents
| distinct State;  // Always terminate the variable with a semicolon
StateCodes
| join StormEvents on  $left.State == $right.State



// specifit the kind of Join
let StateCodes= StormEvents
| distinct State;  // Always terminate the variable with a semicolon
StateCodes
| join kind=inner  StormEvents on  $left.State == $right.State


// right table will always have a suffix of 1 in its columns
let Enddate= StormEvents | distinct(EndTime);
Enddate
| join StormEvents on $left.EndTime == $right.EndTime
| where State in ( "NEW YORK","VIRGINIA","CALIFORNIA")
|extend TotalDamage=DamageCrops+ DamageProperty, totaltest=DamageCrops*2
| project  EventId,TotalDamage,DeathsDirect,DeathsIndirect,DamageCrops,DamageProperty,totaltest


// Visualization
let enddate=StormEvents 
|limit 1000
|distinct EndTime ;
enddate
|join  StormEvents on $left.EndTime ==$right.EndTime
|where State in ( "NEW YORK","VIRGINIA","CALIFORNIA")
|project State,DamageProperty
|order by DamageProperty desc
|render barchart 

// Creating a Function
.create-or-alter function with ( folder="Demo", docstring="Simple Demo function",skipvalidation="true")
MyFunction9() { StormEvents |limit 1000 }

MyFunction1()




// Function s take s a parameter
.create-or-alter function with (folder = "Demo", docstring = "Demo function with parameter", skipvalidation = "true")
MyFunction2(myLimit:long) {     StormEvents     | limit myLimit } 

MyFunction2(20)



